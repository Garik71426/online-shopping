{"version":3,"sources":["components/Header/Header.jsx","components/Products/Product.jsx","components/Products/Products.jsx","components/Basket/Result.jsx","components/Basket/Basket.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","state","isOpen","toggle","setState","Navbar","color","light","expand","NavbarBrand","href","NavbarToggler","onClick","this","Collapse","navbar","Nav","className","NavItem","NavLink","Component","Product","quantity","addProductOnBasket","props","plusBasketCount","name","price","product_id","currency","body","result","axios","post","then","res","catch","err","alert","changeQuantity","event","target","value","img","Col","xl","lg","md","sm","xs","Card","CardImg","top","width","src","alt","CardBody","CardTitle","CardSubtitle","Input","type","min","max","onChange","CardText","Button","Products","products","get","data","Row","map","item","key","_id","Result","dropdownOpen","splitButtonOpen","prices","loading","currencies","toggleSplit","getCurrrencies","getValutes","RUB","pricesConvert","resultShopping","resetBasket","delete","resetBasketCount","prevProps","basketCount","changeCurrency","InputGroup","InputGroupButtonDropdown","addonType","DropdownToggle","caret","DropdownMenu","DropdownItem","charCode","disabled","InputGroupAddon","Spinner","Object","keys","Alert","React","Basket","basket","getBasket","valuBasketCount","length","i","deleteProductFromBasket","currentTarget","getAttribute","minusBasketCount","Table","size","scope","aria-hidden","App","count","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.94c89087.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Navbar, NavbarBrand, NavbarToggler, Collapse,\n    Nav, NavItem, NavLink \n} from 'reactstrap';\n\nimport './Header.scss';\n\nclass Header extends Component {\n    state = {\n        isOpen: false\n    };\n    toggle = () => {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    };\n    render() {\n        return (\n            <div >\n                <Navbar color=\"light\" light expand=\"md\">\n                    <NavbarBrand href=\"/example\">Online shopping</NavbarBrand>\n                    <NavbarToggler onClick={this.toggle} />\n                    <Collapse isOpen={this.state.isOpen} navbar>\n                        <Nav className=\"ml-auto\" navbar>\n                            <NavItem>\n                                <NavLink href=\"example\">About Us</NavLink>\n                            </NavItem>\n                            <NavItem>\n                                <NavLink href=\"example\">Contacts</NavLink>\n                            </NavItem>\n                            <NavItem>\n                                <NavLink href=\"example\">Social Networks</NavLink>\n                            </NavItem>\n                        </Nav>\n                    </Collapse>\n                </Navbar>\n            </div>\n        );\n    };\n};\n\nexport default Header;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Card, CardImg, CardText, CardBody,\n    CardTitle, CardSubtitle, Button, Col,\n    Input\n} from 'reactstrap';\nimport PropTypes from 'prop-types';\n\nclass Product extends Component {\n    state = {\n        quantity: 1\n    };\n    addProductOnBasket = () => {\n        const { plusBasketCount, name, price, product_id, currency } = this.props;\n        const { quantity } = this.state;\n        const result = price * quantity;\n        const body = {\n            product_id: product_id,\n            quantity: quantity,\n            name: name,\n            price: price,\n            result: result,\n            currency: currency\n        };\n        axios.post(`http://localhost:3001/basket/add`, body)\n        .then(res => {\n            plusBasketCount();\n            this.setState({ quantity: 1 });\n        })\n        .catch(err => {\n            alert(err);\n        });\n    };\n    changeQuantity = event => {\n        this.setState({ quantity: event.target.value });\n    }\n    render() {\n        const { img, name, price } = this.props;\n        const { quantity } = this.state;\n        const { changeQuantity, addProductOnBasket } = this;\n        return (\n            <Col xl=\"4\" lg=\"6\" md=\"12\" sm=\"12\" xs = '10'>\n                <Card>\n                    <CardImg top width=\"100%\" src={img} alt=\"Card image cap\" />\n                    <CardBody>\n                        <CardTitle>{name}</CardTitle>\n                        <CardSubtitle><Input type = 'number' min= {1} max = {100} value = {quantity} onChange = {changeQuantity}/></CardSubtitle>\n                        <CardText>{price} RUB</CardText>\n                        <Button onClick = {addProductOnBasket}>Add to basket</Button>\n                    </CardBody>\n                </Card>\n            </Col>\n        );\n    };\n};\n\nProduct.propTypes = {\n    product_id: PropTypes.string.isRequired,\n    currency: PropTypes.string.isRequired,\n    img: PropTypes.string,\n    name: PropTypes.string.isRequired,\n    price: PropTypes.number.isRequired,\n    plusBasketCount: PropTypes.func.isRequired\n};\n\nexport default Product;","import React, { Component, Fragment } from 'react';\nimport { Col, Row } from 'reactstrap';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\n\nimport Product from './Product';\n\nimport './Products.scss';\n\nclass Products extends Component {\n    state = {\n        products: []\n    };\n    componentDidMount(){\n        axios.get(`http://localhost:3001/products`)\n        .then(res => {\n            this.setState({ products: res.data });\n        })\n        .catch(err => {\n            alert(err);\n        });\n    };\n    render() {\n        const { products } = this.state;\n        const { plusBasketCount } = this.props;\n        return (\n            <Col xl=\"8\" lg=\"7\" md=\"6\" sm=\"5\" xs = '10' className = 'products'>\n                <div className = 'products--title'>\n                    <span>P</span>\n                    <span>R</span>\n                    <span>O</span>\n                    <span>D</span>\n                    <span>U</span>\n                    <span>C</span>\n                    <span>T</span>\n                    <span>S</span>\n                </div>\n                <Row>\n                    {products.map(item => {\n                        return <Fragment key = {item._id}>\n                            <Product \n                                product_id = {item._id}\n                                currency = 'RUB'\n                                img = {item.img}\n                                name = {item.name}\n                                price = {item.price}\n                                plusBasketCount = {plusBasketCount}\n                            />\n                        </Fragment>;\n                    })}\n                </Row>\n            </Col>\n        );\n    };\n};\n\nProducts.propTypes = {\n    plusBasketCount: PropTypes.func.isRequired\n};\n\nexport default Products;","import React from 'react';\nimport axios from 'axios';\nimport { Button, DropdownToggle, DropdownMenu, DropdownItem,\n    Input, InputGroup, InputGroupButtonDropdown, InputGroupAddon,\n    Alert, Spinner\n} from 'reactstrap';\nimport PropTypes from 'prop-types';\n\nclass Result extends React.Component {\n    state = {\n        dropdownOpen: false,\n        splitButtonOpen: false,\n        prices: {},\n        loading: false,\n        currencies: []\n    };\n    componentDidMount(){\n        this.getCurrrencies();\n    }\n    componentDidUpdate (prevProps) {\n        if (prevProps.basketCount !== this.props.basketCount) {\n            this.setState({ prices: {} });\n        }\n    };\n    toggleSplit = () => {\n        this.setState({\n            splitButtonOpen: !this.state.splitButtonOpen\n        });\n    };\n    getCurrrencies = () => {\n        axios.get('http://localhost:3001/currencies')\n        .then(res => {\n            this.setState({ currencies: res.data });\n        })\n        .catch(err => {\n            alert(err);\n        });\n    };\n    getValutes = (result) => {\n        !this.state.prices.RUB || this.state.prices.RUB !== result? \n        axios.get(`http://localhost:3001/Valutes/${result}`)\n        .then(res => {\n            this.setState({ prices: res.data, loading: false });\n        })\n        .catch(err => {\n            this.setState({ loading: false });\n            alert(err);\n        }):\n        this.setState({ loading: false });\n    };\n    pricesConvert = () => {\n        const result = this.props.resultShopping();\n        this.setState({ loading: true });\n        this.getValutes(result);\n    };\n    resetBasket = () => {\n        axios.delete('http://localhost:3001/delete_basket')\n        .then(res => {\n            this.props.resetBasketCount();\n            return res;\n        })\n        .catch(err => {\n            alert(err);\n        })\n    }\n\n    render() {\n        const { currency, changeCurrency } = this.props;\n        const { prices, loading, currencies } = this.state;\n        const { resetBasket } = this;\n        return (\n            <>\n                <InputGroup>\n                    <InputGroupButtonDropdown addonType=\"prepend\" isOpen={this.state.splitButtonOpen} toggle={this.toggleSplit}>\n                        <DropdownToggle caret>\n                            My Basket\n                        </DropdownToggle>\n                        <DropdownMenu>\n                            {currencies.map(item => {\n                                return <DropdownItem key = {item.charCode} \n                                            value = {item.charCode}\n                                            onClick = {changeCurrency}\n                                            >\n                                    {item.name}\n                                </DropdownItem>\n                            })}\n                        </DropdownMenu>\n                    </InputGroupButtonDropdown>\n                    <Input value = {currency} disabled />\n                    <InputGroupAddon addonType=\"append\"><Button onClick={this.pricesConvert} color=\"secondary\">Result</Button></InputGroupAddon>\n                </InputGroup>\n                {loading ? \n                    <div className = \"basked--content--response\">\n                        <Spinner color=\"primary\" />\n                    </div>\n                    :\n                    <div className = \"basked--content--response\">\n                        {Object.keys(prices).map(item => {\n                            return <Alert key = {item} color = {item === currency ? 'success' : 'secondary'}>\n                                {item} {prices[item]}\n                            </Alert>;\n                        })}\n                    </div>\n                }\n                <InputGroup className = \"basked--content--buttonsSend\">\n                    <Button color=\"secondary\" onClick = {resetBasket}>Reset basket</Button>\n                    <Button color=\"secondary\">Buy</Button>\n                </InputGroup>\n            </>\n        );\n    };\n};\n\nResult.propTypes = {\n    basketCount: PropTypes.number.isRequired,\n    resultShopping: PropTypes.func.isRequired,\n    currency: PropTypes.string.isRequired,\n    changeCurrency: PropTypes.func.isRequired,\n    resetBasketCount: PropTypes.func.isRequired,\n};\n\nexport default Result;","import React from 'react';\nimport { Col, Table } from 'reactstrap';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\n\nimport Result from './Result';\n\nimport './Basket.scss'\n\nclass Basket extends React.Component {\n    state = {\n        currency: 'RUB',\n        basket: [],\n        result: 0\n    };\n    getBasket = () => {\n        axios.get(`http://localhost:3001/basket`)\n        .then(res => {\n            this.props.valuBasketCount(res.data.length);\n            this.setState({ basket: res.data });\n        })\n        .catch(err => {\n            alert(err);\n        });\n    };\n    componentDidMount(){\n        this.getBasket();\n    };\n    componentDidUpdate(prevProps){\n        (this.props.basketCount !== prevProps.basketCount) && this.getBasket();\n    };\n    resultShopping = () => {\n        const products = this.state.basket;\n        let result = 0;\n        for(let i = 0; i < products.length; i++){\n            result += products[i].price * products[i].quantity;\n        }\n        return result;\n    };\n    changeCurrency = event => {\n        this.setState({ currency: event.target.value });\n    };\n    deleteProductFromBasket = event => {\n        const product_id = event.currentTarget.getAttribute('product_id');\n        axios.delete(`http://localhost:3001/delete/${product_id}`)\n        .then(res => {\n            this.props.minusBasketCount();\n        })\n        .catch(err => {\n            alert(err);\n        })\n    }\n    render() {\n        const { changeCurrency, resultShopping, deleteProductFromBasket } = this;\n        const { currency, basket } = this.state;\n        const { basketCount, resetBasketCount } = this.props;\n        return (\n            <Col xl=\"4\" lg=\"5\" md=\"6\" sm=\"7\" xs = '10' className = 'basked'>\n                <div className = 'basked--content'>\n                    <div className = 'basked--content--title'>\n                        <i className=\"fa fa-shopping-basket\"></i>\n                        <span>My basket</span>\n                    </div>\n                    <Table size=\"sm\" className = 'basked--content--table'>\n                        <thead>\n                            <tr>\n                                <th>№</th>\n                                <th>Name</th>\n                                <th>Price</th>\n                                <th>Result</th>\n                                <th>Currency</th>\n                            </tr>\n                        </thead>\n                        <tbody className = 'basked--content--table--body'>\n                            {basket.map(item => {\n                                return <tr key = {item._id}>\n                                    <th scope=\"row\">{item.quantity}</th>\n                                    <td>{item.name}</td>\n                                    <td>{item.price}</td>\n                                    <td>{item.result}</td>\n                                    <td>\n                                        {item.currency}\n                                        <button onClick = {deleteProductFromBasket} product_id = {item.product_id}>\n                                            <i className=\"fa fa-trash\" aria-hidden=\"true\"></i>\n                                        </button>\n                                    </td>\n                                </tr>;\n                            })}\n                        </tbody>\n                    </Table>\n                    <Result \n                        basketCount = { basketCount }\n                        resultShopping = {resultShopping}\n                        currency = {currency}\n                        changeCurrency = {changeCurrency}\n                        resetBasketCount = {resetBasketCount}\n                    />\n                </div>\n            </Col>\n        );\n    };\n};\n\nBasket.propTypes = {\n    basketCount: PropTypes.number.isRequired,\n    minusBasketCount: PropTypes.func.isRequired,\n    resetBasketCount: PropTypes.func.isRequired,\n    valuBasketCount: PropTypes.func.isRequired\n};\n\nexport default Basket;","import React, { Component } from 'react';\nimport { Container, Row } from 'reactstrap';\n\nimport Header from './components/Header/Header';\nimport Products from './components/Products/Products'\nimport Basket from './components/Basket/Basket';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.scss';\n\nclass App extends Component {\n    state = {\n        basketCount: 0,\n    };\n    plusBasketCount = () => {\n        this.setState({ basketCount: this.state.basketCount + 1 });\n    };\n    minusBasketCount = () => {\n        this.setState({ basketCount: this.state.basketCount - 1 });\n    };\n    resetBasketCount = () => {\n        this.setState({ basketCount: 0 });\n    };\n    valuBasketCount = count => {\n        this.setState({ basketCount: count });\n    }\n    render() {\n        const { basketCount } = this.state;\n        const { plusBasketCount, minusBasketCount, resetBasketCount, valuBasketCount } = this;\n        return (\n            <div className=\"App\">\n                <Container>\n                    <Header/>\n                    <Row>\n                        <Products \n                            plusBasketCount = {plusBasketCount} \n                        />\n                        <Basket \n                            basketCount = {basketCount} \n                            minusBasketCount = {minusBasketCount}\n                            resetBasketCount = {resetBasketCount}\n                            valuBasketCount = {valuBasketCount}\n                        />\n                    </Row>\n                </Container>\n            </div>\n        );\n    };\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}